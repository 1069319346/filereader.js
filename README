filereader.js
A small library independant wrapper for the JavaScript FileReader interface

See http://dev.w3.org/2006/webapi/FileAPI/#FileReader-interface for basic information
See http://dev.w3.org/2006/webapi/FileAPI/#event-summary for details on Options/on.* callbacks

Usage:
FileReaderJS.setupInput(input, opts);
FileReaderJS.setupDrop(div, opts); 

If you have jQuery:
$(input).fileReaderJS(opts);

Options:
	readAsMap: A collection taking key as a string that will be matched with regex against
		file types and the type to read as.  If no match is found, it will use readAsDefault.
		The default map is:
		{
			'image/*': 'DataURL',
			'text/*' : 'Text'
		}
	readAsDefault: 'ArrayBuffer' | 'BinaryString' (default) | 'Text' | 'DataURL' 
	accept: A regex string to match the contenttype of a given file.
			For example: 'image/*' to only accept images.
			on.skip will be called when a file does not match the filter.
	dragClass: A CSS class to add onto the element called with setupDrop while dragging
	on: 
		loadstart: function(e, file) { }
		progress: function(e, file) { }
		load: function(e, file) { }
		abort: function(e, file) { }
		error: function(e, file) { }
		loadend: function(e, file) { }
		skip: function(file) { } Called only when a read has been skipped because of the accept string
		groupstart: function(group) { } 
		groupend: function(group) { } 

Parameters to events:
	e - the native ProgressEvent created by the FileReader
	file - an extension of the original File object.  See W3 link above for all native parameters.  Here are the extra fields 
		file.extra = { 
			id: a generated int id for this file.
			groupID: the group that it belongs to
			nameNoExtension: 'myImage' instead of 'myImage.png'
			extension: 'png' instead of 'myImage.png'
			prettySize: '46.47' kb instead of 47585 (size field)
		}
	
	group: simple grouping of files.  Each time a change event or drop even happens and a FileList is created, all of these files are stored inside a group object.
		groupID: a generated int id for this group
		files: the FileList associated with the group
		
	
What it isn't:
* A drag and drop file uploader.  If you wish to upload the files to a server, search for 'javascript drag and drop file upload' online.  There are plugins that do exactly this.
* Completely cross browser - Chrome 6+, Firefox 3.6+, Safari 5.*+ support the File API.

Future changes (hopefully):
* Once FileReaderSync in implemented in browsers, provide this as an option to provide a non-blocking way to read files using Web Workers.  See http://www.w3.org/TR/FileAPI/#FileReaderSync and https://bugs.webkit.org/show_bug.cgi?id=41567.

Any contributions welcome.  This plugin is open source under the MIT License.
Author: Brian Grinstead
